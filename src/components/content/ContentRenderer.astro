---
import ParagraphBlock from './blocks/ParagraphBlock.astro';
import HeadingBlock from './blocks/HeadingBlock.astro';
import CodeBlock from './blocks/CodeBlock.astro';
import ImageBlock from './blocks/ImageBlock.astro';
import CalloutBlock from './blocks/CalloutBlock.astro';
import QuoteBlock from './blocks/QuoteBlock.astro';
import ListBlock from './blocks/ListBlock.astro';
import VideoBlock from './blocks/VideoBlock.astro';

export interface Props {
  blocks?: any[];
}

// Default vacío y protección
const { blocks = [] } = Astro.props;

const sortedBlocks = Array.isArray(blocks)
  ? [...blocks].sort((a, b) => (a?.order ?? 0) - (b?.order ?? 0))
  : [];
---

<div class="prose prose-lg max-w-none">
  {Array.isArray(sortedBlocks) && sortedBlocks.map((block) => {
    const blockType = (block?.type || '').toLowerCase();
    
    switch (blockType) {
      case 'paragraph':
        return <ParagraphBlock block={block} />;
      case 'heading':
        return <HeadingBlock block={block} />;
      case 'code':
        return <CodeBlock block={block} />;
      case 'image':
        return <ImageBlock block={block} />;
      case 'callout':
        return <CalloutBlock block={block} />;
      case 'quote':
        return <QuoteBlock block={block} />;
      case 'list':
        return <ListBlock block={block} />;
      case 'video': 
        return <VideoBlock block={block} />;
      default:
        return <div class="bg-red-100 p-4 rounded">Unknown block type: {block?.type}</div>;
    }
  })}
</div>
