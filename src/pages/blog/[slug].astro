---
import Layout from '../../layouts/Layout.astro';
import BlogPostHeader from '../../components/sections/blogPost/BlogPostHeader.astro';
import BlogPostHero from '../../components/sections/blogPost/BlogPostHero.astro';
import ContentRenderer from '../../components/content/ContentRenderer.astro';
import BlogPostAuthor from '../../components/sections/blogPost/BlogPostAuthor.astro';
import BlogPostEngagement from '../../components/sections/blogPost/BlogPostEngagement.astro';
import BlogPostRelated from '../../components/sections/blogPost/BlogPostRelated.astro';
import { portfolioAPI } from '../../lib/api';

export async function getStaticPaths() {
  const blogPostsResponse = await portfolioAPI.getBlogPosts();
  const blogPosts = blogPostsResponse.success ? blogPostsResponse.data : [];
  return blogPosts.map((blogPostData) => ({
    params: { slug: blogPostData.slug },
    props: { blogPostData }
  }));
}

const { blogPostData } = Astro.props;
if (!blogPostData) return Astro.redirect('/404');

const transformedPost = {
  id: blogPostData.id.toString(),
  slug: blogPostData.slug,
  title: blogPostData.title,
  subtitle: blogPostData.subtitle || '',
  excerpt: blogPostData.excerpt,
  publishedAt: blogPostData.publishedAt || blogPostData.createdAt,
  updatedAt: blogPostData.updatedAt,
  readTime: blogPostData.readTime || 5,
  wordCount: blogPostData.wordCount || 0,
  views: blogPostData.views || 0,
  category: blogPostData.category?.name || 'Uncategorized',
  tags: Array.isArray(blogPostData.blogPostTags)
    ? blogPostData.blogPostTags
        .filter(tag => tag?.blogTag)
        .map(tag => ({
          name: tag.blogTag.name,
          slug: tag.blogTag.slug
        }))
    : [],

  series: blogPostData.series ? {
    name: blogPostData.series.name,
    part: blogPostData.seriesPart || 1,
    total: blogPostData.series.totalParts || 1,
    nextPost: null
  } : null,
  heroImage: blogPostData.heroImage ? {
    url: blogPostData.heroImage,
    alt: blogPostData.heroImageAlt || blogPostData.title,
    caption: blogPostData.heroImageCaption || ''
  } : null,
  contentBlocks: blogPostData.contentBlocks || [],
  author: blogPostData.author || {
    name: "David Lopez",
    bio: "Full-stack developer passionate about cloud infrastructure and developer experience.",
    avatar: "/author-avatar.jpg",
    social: { twitter: "#", github: "#", linkedin: "#" }
  },
  reactions: { likes: 0, loves: 0, bookmarks: 0 },
  metaDescription: blogPostData.metaDescription || blogPostData.excerpt,
  socialImage: blogPostData.socialImage || blogPostData.heroImage || ''
};

// Related posts
const relatedResponse = await portfolioAPI.getBlogPosts();
const currentTags = transformedPost.tags.map(t => t.slug);
const relatedPosts = relatedResponse.success && Array.isArray(relatedResponse.data)
  ? relatedResponse.data
      .filter(post => post.id !== blogPostData.id)
      .filter(post => {
        const postTags = Array.isArray(post.blogPostTags)
          ? post.blogPostTags.map(t => t.blogTag?.slug).filter(Boolean)
          : [];
        // Coincidencia por categoría o al menos 1 tag
        const sameCategory = post.category?.name === blogPostData.category?.name;
        const sameTag = postTags.some(tag => currentTags.includes(tag));
        return sameCategory || sameTag;
      })
      .slice(0, 3)
      .map(post => ({
        slug: post.slug,
        title: post.title,
        excerpt: post.excerpt,
        image: post.heroImage,
        readTime: post.readTime || 5,
        category: post.category?.name || 'uncategorized',
        publishedAt: post.publishedAt || post.createdAt
      }))
  : [];



---

<Layout
  title={`${transformedPost.title} | David Lopez Blog`}
  description={transformedPost.metaDescription}
  image={transformedPost.socialImage || transformedPost.heroImage?.url}
>
  <!-- Reading Progress Bar -->
  <div id="reading-progress" class="fixed top-0 left-0 w-full h-1 bg-gray-200 z-50">
    <div id="progress-bar" class="h-full bg-yellow-400 transition-all duration-300" style="width: 0%"></div>
  </div>

  <!-- Navigation -->
  <nav class="fixed top-0 left-0 right-0 z-40 bg-white/80 backdrop-blur-sm border-b border-gray-200 mt-1">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <a href="/blog" class="inline-flex items-center text-sm font-medium text-gray-600 hover:text-black">
          ← Back to Blog
        </a>
        <div class="hidden sm:flex items-center space-x-4 text-xs text-gray-500">
          <span>{transformedPost.readTime} min read</span>
          <span>•</span>
          <span>{transformedPost.views.toLocaleString()} views</span>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="pt-16">
    <BlogPostHeader post={transformedPost} />
    <BlogPostHero post={transformedPost} />
    <section class="px-4 sm:px-6 lg:px-8 mb-16">
      <div class="max-w-4xl mx-auto">
        <ContentRenderer blocks={transformedPost.contentBlocks} />
      </div>
    </section>
    <BlogPostAuthor author={transformedPost.author} />
    <BlogPostEngagement post={transformedPost} />
    <BlogPostRelated 
  posts={Array.isArray(relatedPosts) ? relatedPosts : []} 
  series={transformedPost.series || null} 
/>

  </main>
</Layout>

<script>
  function updateReadingProgress() {
    const article = document.querySelector('main');
    const progressBar = document.getElementById('progress-bar');
    if (!article || !progressBar) return;
    const scrollTop = window.pageYOffset;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    progressBar.style.width = Math.min(100, Math.max(0, scrollPercent)) + '%';
  }
  window.addEventListener('scroll', updateReadingProgress);
  window.addEventListener('resize', updateReadingProgress);
</script>
