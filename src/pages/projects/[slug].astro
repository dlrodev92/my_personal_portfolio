---
import Layout from '../../layouts/Layout.astro';
import ProjectHero from '../../components/sections/projectPage/ProjectHero.astro';
import ProjectOverview from '../../components/sections/projectPage/ProjectOverview.astro';
import TechnicalDeepDive from '../../components/sections/projectPage/TechnicalDeepDive.astro';
import VisualShowcase from '../../components/sections/projectPage/VisualShowcase';
import LessonsOutcomes from '../../components/sections/projectPage/LessonsOutcomes.astro';
import RelatedProjects from '../../components/sections/projectPage/RelatedProjects.astro';
import { portfolioAPI } from '../../lib/api';

export async function getStaticPaths() {
  console.log('🔍 getStaticPaths ejecutándose...');
  
  try {
    const projectsResponse = await portfolioAPI.getProjects();
    console.log('📝 Respuesta de getProjects:', projectsResponse.success);
    
    const projects = projectsResponse.success ? projectsResponse.data : [];
    console.log('📝 Proyectos encontrados:', projects.length);
    
    // NO hagas llamadas adicionales - usa los datos que ya tienes
    const paths = projects.map((projectData) => ({
      params: { slug: projectData.slug },
      props: { projectData }  // Usa directamente los datos de getProjects()
    }));
    
    console.log('🗂️ Paths generados:', paths.map(p => p.params.slug));
    
    return paths;
  } catch (error) {
    console.error('❌ Error en getStaticPaths:', error);
    return [];
  }
}

const { projectData } = Astro.props;

if (!projectData) {
  console.log('❌ No hay projectData, redirigiendo a 404');
  return Astro.redirect('/404');
}

console.log('✅ Proyecto cargado:', projectData.title);

// Transformar los datos (tu código existente)
const project = {
  hero: {
    title: projectData.title,
    subtitle: projectData.subtitle,
    status: projectData.status === 'LIVE' ? '🚀 Live' : 
            projectData.status === 'IN_PROGRESS' ? '⚡ In Progress' : 
            '🛠 Building',
    image: projectData.heroImage,
    liveDemo: projectData.liveDemo,
    github: projectData.github,
    caseStudy: projectData.caseStudy,
    metrics: {
      launchDate: projectData.metrics?.launchDate || 'Not specified',
      duration: projectData.metrics?.duration || 'Not specified',
      teamSize: projectData.metrics?.teamSize || 'Not specified'
    }
  },
  overview: {
    problem: projectData.overview?.problem || 'Problem description not available.',
    solution: projectData.overview?.solution || 'Solution description not available.',
    role: projectData.overview?.role || 'Role description not available.',
    impact: projectData.overview?.impact || 'Impact description not available.'
  },
  technical: {
    technologies: projectData.technologies?.map(tech => ({
      name: tech.name,
      reason: tech.reason || 'Technology choice reasoning not provided.'
    })) || [],
    architecture: {
      database: projectData.technicalDetails?.database || 'Database architecture not specified.',
      api: projectData.technicalDetails?.api || 'API architecture not specified.',
      components: projectData.technicalDetails?.components || 'Component architecture not specified.'
    },
    performance: projectData.performanceMetrics?.map(metric => metric.description) || []
  },
  visual: {
    screenshots: projectData.screenshots?.map(screenshot => ({
      url: screenshot.url,
      description: screenshot.description
    })) || []
  },
  lessons: {
    lessonsLearned: projectData.lessons?.map(lesson => lesson.description) || [],
    businessOutcomes: projectData.businessOutcomes?.map(outcome => outcome.description) || [],
    improvements: projectData.improvements?.map(improvement => improvement.description) || []
  },
  related: {
    relatedProjects: [],
    nextSteps: projectData.nextSteps?.map(step => step.description) || [],
    futureTools: projectData.futureTools?.map(tool => tool.name) || []
  }
};
---

<Layout
  title={`${project.hero.title} | Project by David Lopez`}
  description={project.overview.solution || project.overview.problem || "Full-stack project case study by David Lopez"}
  image={project.hero.image}
>
  <ProjectHero project={project.hero} />
  <ProjectOverview project={project.overview} />
  <TechnicalDeepDive project={project.technical} />
  <VisualShowcase project={project.visual} client:load/>
  <LessonsOutcomes project={project.lessons} />
  <div class="text-center mb-16">
      <a 
        href="/projects"
        class="inline-flex items-center font-display font-bold bg-black text-white px-6 py-3 rounded-lg hover:bg-text-secondary transition-all duration-300 transform hover:scale-105"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
          <path d="M19 12H5"/>
          <path d="m12 19-7-7 7-7"/>
        </svg>
        Back to Projects
      </a>
    </div>
</Layout>